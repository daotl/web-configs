// https://github.com/biomejs/biome/blob/cli/v1.9.4/packages/%40biomejs/biome/configuration_schema.json
{
  "$schema": "./node_modules/@biomejs/biome/configuration_schema.json",
  "vcs": {
    "enabled": true,
    "clientKind": "git",
    "useIgnoreFile": true,
  },
  "files": {
    "ignore": ["dist", ".pnpm-store"],
  },
  // "organizeImports": {
  //   "enabled": true
  // },
  "formatter": {
    // "enabled": true,
    "formatWithErrors": true,
    "indentStyle": "space",
    // "indentWidth": 2,
    // "lineEnding": "lf",
    // "lineWidth": 80,
    // "attributePosition": "auto",
  },
  "css": {
    "formatter": {
      "enabled": false,
    },
    "linter": {
      "enabled": false,
    },
  },
  "javascript": {
    "parser": {
      // Allows to support the unsafe/experimental parameter decorators.
      "unsafeParameterDecoratorsEnabled": true,
    },
    // "globals": ["$", "_", "externalVariable"],
    // "jsxRuntime": "transparent",
    "formatter": {
      // "enabled": true
      "quoteStyle": "single",
      // "jsxQuoteStyle": "double"
      // "quoteProperties": "asNeeded",
      // "trailingCommas": "all",
      "semicolons": "asNeeded",
      "arrowParentheses": "asNeeded",
      // "bracketSameLine": false,
      // "bracketSpacing": true,
      // "attributePosition": "auto",
    },
  },
  "linter": {
    // "enabled": true,
    "rules": {
      "recommended": true,

      // Rules focused on preventing accessibility problems.
      "a11y": {
        "recommended": true,
      },

      // Rules that focus on inspecting complex code that could be simplified.
      "complexity": {
        "recommended": true,
        // Use Date.now() to get the number of milliseconds since the Unix Epoch.
        // https://biomejs.dev/linter/rules/use-date-now
        "useDateNow": "error",
        // Disallow functions that exceed a given Cognitive Complexity score.
        // https://biomejs.dev/linter/rules/no-excessive-cognitive-complexity
        "noExcessiveCognitiveComplexity": {
          "level": "warn",
          // "options": {
          //   "maxAllowedComplexity": 15
          // }
        },
        // Disallow the use of void operators, which is not a familiar operator.
        // https://biomejs.dev/linter/rules/no-void
        // "noVoid": "error",
        // Enforce the usage of a literal access to properties over computed property access.
        // https://biomejs.dev/linter/rules/use-literal-keys
        "useLiteralKeys": "off",
        // Discard redundant terms from logical expressions.
        // https://biomejs.dev/linter/rules/use-simplified-logic-expression
        "useSimplifiedLogicExpression": "error",
        // Disallow unnecessary concatenation of string or template literals.
        // https://biomejs.dev/linter/rules/no-useless-string-concat
        "noUselessStringConcat": "error",
        // Disallow initializing variables to undefined.
        // https://biomejs.dev/linter/rules/no-useless-undefined-initialization
        "noUselessUndefinedInitialization": "error",
      },

      // Rules that detect code that is guaranteed to be incorrect or useless.
      "correctness": {
        "recommended": true,
        // Disallow the use of Math.min and Math.max to clamp a value where the result itself is constant.
        // https://biomejs.dev/linter/rules/no-constant-math-min-max-clamp
        "noConstantMathMinMaxClamp": "error",
        // Disallow new operators with the Symbol object.
        // https://biomejs.dev/linter/rules/no-new-symbol
        "noNewSymbol": "error",
        // Prevents the usage of variables that haven’t been declared inside the document.
        // https://biomejs.dev/linter/rules/no-undeclared-variables
        // Forbid the use of Node.js builtin modules.
        // https://biomejs.dev/linter/rules/no-nodejs-modules
        // "noNodejsModules": "error",
        // Disallow the use of dependencies that aren’t specified in the package.json.
        // https://biomejs.dev/linter/rules/no-undeclared-dependencies
        // "noUndeclaredDependencies": "error",
        "noUndeclaredVariables": "error",
        // Disallow unused function parameters.
        // https://biomejs.dev/linter/rules/no-unused-function-parameters
        "noUnusedFunctionParameters": "error",
        // Disallow unused imports.
        // https://biomejs.dev/linter/rules/no-unused-imports
        "noUnusedImports": "error",
        // Disallow unused private class members
        // https://biomejs.dev/linter/rules/no-unused-private-class-members
        "noUnusedPrivateClassMembers": "error",
        // Disallow unused variables.
        // There are two exceptions to this rule:
        //   variables that starts with underscore, ex: let _something;
        //   the React variable;
        // https://biomejs.dev/linter/rules/no=unused-variables
        "noUnusedVariables": "error",
        // Disallow Array constructors.
        // https://biomejs.dev/linter/rules/use-array-literals
        "useArrayLiterals": "error",
        // Enforce that all React hooks are being called from the Top Level component functions.
        // https://biomejs.dev/linter/rules/use-hook-at-top-level
        // "useHookAtTopLevel": "error"
        // Enforce file extensions for relative imports.
        // https://biomejs.dev/linter/rules/use-import-extensions
        "useImportExtensions": "error",
      },

      // Rules catching ways your code could be written to run faster, or generally be more efficient.
      "performance": {
        "recommended": true,
        // Disallow the use of barrel file.
        // https://biomejs.dev/linter/rules/no-barrel-file
        "noBarrelFile": "error",
        // Avoid re-export all.
        // https://biomejs.dev/linter/rules/no-re-export-all
        "noReExportAll": "error",
        // Require regex literals to be declared at the top level.
        // https://biomejs.dev/linter/rules/use-top-level-regex
        "useTopLevelRegex": "error",
      },

      // Rules that detect potential security flaws.
      "security": {
        "recommended": true,
      },

      // Rules enforcing a consistent and idiomatic way of writing your code.
      "style": {
        "recommended": true,
        // Disallow default exports.
        // https://biomejs.dev/linter/rules/no-default-export
        "noDefaultExport": "error",
        // Disallow using a callback in asynchronous tests and hooks.
        // https://biomejs.dev/linter/rules/no-done-callback
        // "noDoneCallback": "error",
        // Disallow implicit true values on JSX boolean attributes
        // https://biomejs.dev/linter/rules/no-implicit-boolean
        "noImplicitBoolean": "error",
        // Disallow the use of TypeScript’s namespaces.
        // https://biomejs.dev/linter/rules/no-namespace
        "noNamespace": "error",
        // Disallow the use of namespace imports.
        // https://biomejs.dev/linter/rules/no-namespace-import
        "noNamespaceImport": "error",
        // Disallow negation in the condition of an if statement if it has an else clause.
        // https://biomejs.dev/linter/rules/no-negation-else
        // "noNegationElse": "error",
        // Disallow the use of parameter properties in class constructors.
        // https://biomejs.dev/linter/rules/no-parameter-properties
        "noParameterProperties": "error",
        // This rule allows you to specify global variable names that you don’t want to use in your application.
        // https://biomejs.dev/linter/rules/no-restricted-globals
        // "noRestrictedGlobals": {
        //   "level": "error",
        //   "options": {
        //     "deniedGlobals": ["$", "MooTools"]
        //    }
        // }
        // Disallow the use of constants which its value is the upper-case version of its name.
        // https://biomejs.dev/linter/rules/no-shouty-constants
        "noShoutyConstants": "error",
        // Disallow the use of yoda expressions.
        // https://biomejs.dev/linter/rules/no-yoda-expression
        "noYodaExpression": "error",
        // Requires following curly brace conventions.
        // https://biomejs.dev/linter/rules/use-block-statements
        "useBlockStatements": "error",
        // Enforce using else if instead of nested if in else clauses.
        // https://biomejs.dev/linter/rules/use-collapsed-else-if
        "useCollapsedElseIf": "error",
        // Require consistently using either T[] or Array<T>
        // https://biomejs.dev/linter/rules/use-consistent-array-type
        "useConsistentArrayType": "error",
        // Enforce the use of new for all builtins, except String, Number and Boolean.
        // https://biomejs.dev/linter/rules/use-consistent-builtin-instantiation
        "useConsistentBuiltinInstantiation": "error",
        // Require the default clause in switch statements.
        // https://biomejs.dev/linter/rules/use-default-switch-clause
        "useDefaultSwitchClause": "error",
        // Enforce explicitly comparing the length, size, byteLength or byteOffset property of a value.
        // https://biomejs.dev/linter/rules/use-explicit-length-check
        "useExplicitLengthCheck": "error",
        // Enforce naming conventions for JavaScript and TypeScript filenames.
        // https://biomejs.dev/linter/rules/use-filenaming-convention
        "useFilenamingConvention": {
          "level": "error",
          "options": {
            // "strictCase": true,
            "requireAscii": true, // This option will be turned on by default in Biome 2.0.
            "filenameCases": ["kebab-case", "export"],
          },
        },
        // This rule recommends a for-of loop when in a for loop, the index used to extract an item from the iterated array.
        // https://biomejs.dev/linter/rules/use-for-of
        "useForOf": "error",
        // This rule enforces the use of <>…</> over <Fragment>…</Fragment>.
        // https://biomejs.dev/linter/rules/use-fragment-syntax
        "useFragmentSyntax": "error",
        // Enforce naming conventions for everything across a codebase.
        // https://biomejs.dev/linter/rules/use-naming-convention
        "useNamingConvention": {
          "level": "error",
          // "options": {
          //   "strictCase": true,
          //   "enumMemberCase": "PascalCase"
          // }
        },
        // Promotes the usage of node:assert /strict over node:assert .
        // https://biomejs.dev/linter/rules/use-node-assert-strict
        "useNodeAssertStrict": "error",
        // When expressing array types, this rule promotes the usage of T[] shorthand instead of Array<T>.
        // https://biomejs.dev/linter/rules/use-shorthand-array-type
        "useShorthandArrayType": "error",
        // Require assignment operator shorthand where possible.
        // https://biomejs.dev/linter/rules/use-shorthand-assign
        "useShorthandAssign": "error",
        // Require new when throwing an error.
        // https://biomejs.dev/linter/rules/use-throw-new-error
        "useThrowNewError": "error",
        // Disallow throwing non-Error values.
        // https://biomejs.dev/linter/rules/use-throw-only-error
        "useThrowOnlyError": "error",
      },

      // Rules that detect code that is likely to be incorrect or useless.
      "suspicious": {
        "recommended": true,
        // Disallow the use of console.
        // https://biomejs.dev/linter/rules/no-console
        "noConsole": "error",
        // Disallow empty block statements and static blocks.
        // https://biomejs.dev/linter/rules/no-empty-block-statements
        "noEmptyBlockStatements": "error",
        // Disallow variables from evolving into any type through reassignments.
        // https://biomejs.dev/linter/rules/no-evolving-types
        "noEvolvingTypes": "error",
        // Checks that the assertion function, for example expect, is placed inside an it() function call.
        // https://biomejs.dev/linter/rules/no-misplaced-assertion
        "noMisplacedAssertion": "error",
        // Disallow shorthand assign when variable appears on both sides.
        // https://biomejs.dev/linter/rules/no-misrefactored-shorthand-assign
        "noMisrefactoredShorthandAssign": "warn",
        // Prevents React-specific JSX properties from being used.
        // https://biomejs.dev/linter/rules/no-react-specific-props
        // "noReactSpecificProps": "error",
        // Disallow disabled tests.
        // https://biomejs.dev/linter/rules/no-skipped-tests
        "noSkippedTests": "warn",
        // Ensure async functions utilize await.
        // https://biomejs.dev/linter/rules/use-await
        "useAwait": "error",
        // Enforce passing a message value when creating a built-in error.
        // https://biomejs.dev/linter/rules/use-error-message
        "useErrorMessage": "error",
        // Enforce using the digits argument with Number#toFixed().
        // https://biomejs.dev/linter/rules/use-number-to-fixed-digits-argument
        "useNumberToFixedDigitsArgument": "error",
      },

      // New rules that are still under development.
      // "nursery": {
      // }
    },
  },

  // `extended` + `overrides` not working currently, need to copy the following config to projects
  // "overrides": [
  //   {
  //     "include": ["*.jsonc"],
  //     "json": {
  //       "formatter": {
  //         "trailingCommas": "all",
  //       },
  //     },
  //   },
  //   {
  //     "include": [".vscode/*.json"],
  //     "json": {
  //       "parser": {
  //         "allowComments": true,
  //         "allowTrailingCommas": true,
  //       },
  //     },
  //   },
  //   {
  //     "include": ["eslint.config.js"],
  //     "linter": {
  //       "rules": {
  //         "style": {
  //           "noDefaultExport": "off",
  //         },
  //       },
  //     },
  //   },
  // ],
}
