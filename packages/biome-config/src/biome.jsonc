// https://github.com/biomejs/biome/blob/cli/v1.9.4/packages/%40biomejs/biome/configuration_schema.json
{
  "root": false,
  "$schema": "./node_modules/@biomejs/biome/configuration_schema.json",
  "vcs": {
    "enabled": true,
    "clientKind": "git",
    "useIgnoreFile": true
  },
  "files": {
    "includes": [
      "**",
      "!.pnpm-store",
      "!**/dist",
      // Generated by unplugin-auto-import
      "!**/auto-imports.d.ts"
    ]
  },
  "formatter": {
    // "enabled": true,
    "formatWithErrors": true,
    "indentStyle": "space"
    // "indentWidth": 2,
    // "lineEnding": "lf",
    // "lineWidth": 80,
    // "attributePosition": "auto",
  },
  "html": {
    "formatter": {
      "enabled": true
    }
  },
  // TODO: Waiting support for Embedded language formatting (`<style>` in `*.vue`)
  // https://github.com/biomejs/biome/issues/3334
  "css": {
    "formatter": {
      "enabled": false
    },
    "linter": {
      "enabled": false
    }
  },
  "javascript": {
    "parser": {
      // Allows to support the unsafe/experimental parameter decorators.
      "unsafeParameterDecoratorsEnabled": true
    },
    // "globals": ["$", "_", "externalVariable"],
    // "jsxRuntime": "transparent",
    "formatter": {
      // "enabled": true
      "quoteStyle": "single",
      // "jsxQuoteStyle": "double"
      // "quoteProperties": "asNeeded",
      // "trailingCommas": "all",
      "semicolons": "asNeeded",
      "arrowParentheses": "asNeeded"
      // "bracketSameLine": false,
      // "bracketSpacing": true,
      // "attributePosition": "auto",
    }
  },
  "linter": {
    "rules": {
      "recommended": true,
      // Rules focused on preventing accessibility problems.
      "a11y": {
        "recommended": true
      },
      // Rules that focus on inspecting complex code that could be simplified.
      "complexity": {
        "recommended": true,
        // Disallow functions that exceed a given Cognitive Complexity score.
        // https://biomejs.dev/linter/rules/no-excessive-cognitive-complexity
        "noExcessiveCognitiveComplexity": {
          "level": "warn"
          // "options": {
          //   "maxAllowedComplexity": 15
          // }
        },
        // This rule enforces a maximum depth to nested describe() in test files.
        // https://biomejs.dev/linter/rules/no-excessive-nested-test-suites
        "noExcessiveNestedTestSuites": "error",
        // Prefer for...of statement instead of Array.forEach.
        // https://biomejs.dev/linter/rules/no-for-each
        // "noForEach": "error",
        // Disallow unnecessary concatenation of string or template literals.
        // https://biomejs.dev/linter/rules/no-useless-string-concat
        "noUselessStringConcat": "error",
        // Disallow the use of void operators, which is not a familiar operator.
        // https://biomejs.dev/linter/rules/no-void
        // "noVoid": "error",
        // Discard redundant terms from logical expressions.
        // https://biomejs.dev/linter/rules/use-simplified-logic-expression
        "useSimplifiedLogicExpression": "error",
        // Enforce the use of while loops instead of for loops when the initializer and update expressions are not needed.
        // https://biomejs.dev/linter/rules/use-while
        "useWhile": "error"
      },
      // Rules that detect code that is guaranteed to be incorrect or useless.
      "correctness": {
        "recommended": true,
        // Prevents the usage of variables that haven’t been declared inside the document.
        // https://biomejs.dev/linter/rules/no-undeclared-variables
        // Forbid the use of Node.js builtin modules.
        // https://biomejs.dev/linter/rules/no-nodejs-modules
        // "noNodejsModules": "error",
        // Restrict imports of private exports.
        // https://biomejs.dev/linter/rules/no-private-imports
        "noPrivateImports": "error",
        // Disallow the use of dependencies that aren’t specified in the package.json.
        // https://biomejs.dev/linter/rules/no-undeclared-dependencies
        // "noUndeclaredDependencies": "error",
        "noUndeclaredVariables": "error",
        // Enforce that all React hooks are being called from the Top Level component functions.
        // https://biomejs.dev/linter/rules/use-hook-at-top-level
        // "useHookAtTopLevel": "error"
        // Enforce file extensions for relative imports.
        // https://biomejs.dev/linter/rules/use-import-extensions
        "useImportExtensions": "error"
      },
      // Rules catching ways your code could be written to run faster, or generally be more efficient.
      "performance": {
        "recommended": true,
        // Disallow the use of barrel file.
        // https://biomejs.dev/linter/rules/no-barrel-file
        "noBarrelFile": "error",
        // Disallow the use of the delete operator.
        // https://biomejs.dev/linter/rules/no-delete
        "noDelete": "error",
        // Prevent usage of <img> element in a Next.js project.
        // https://biomejs.dev/linter/rules/no-img-element
        // "noImgElement": "error",
        // Disallow the use of namespace imports.
        // https://biomejs.dev/linter/rules/no-namespace-import
        "noNamespaceImport": "error",
        // Avoid re-export all.
        // https://biomejs.dev/linter/rules/no-re-export-all
        "noReExportAll": "error",
        // Require regex literals to be declared at the top level.
        // https://biomejs.dev/linter/rules/use-top-level-regex
        "useTopLevelRegex": "error"
      },
      // Rules that detect potential security flaws.
      "security": {
        "recommended": true
      },
      "style": {
        "recommended": true,
        // Disallow use of CommonJs module system in favor of ESM style imports.
        // https://biomejs.dev/linter/rules/no-common-js
        "noCommonJs": "error",
        // Disallow default exports.
        // https://biomejs.dev/linter/rules/no-default-export
        "noDefaultExport": "error",
        // Disallow using a callback in asynchronous tests and hooks.
        // https://biomejs.dev/linter/rules/no-done-callback
        // "noDoneCallback": "error",
        // Disallow TypeScript enum.
        // https://biomejs.dev/linter/rules/no-enum
        // "noEnum": "warning",
        // Disallow exporting an imported variable.
        // https://biomejs.dev/linter/rules/no-exported-imports
        "noExportedImports": "error",
        // Prevent usage of <head> element in a Next.js project.
        // https://biomejs.dev/linter/rules/no-head-element
        // "noHeadElement": "error",
        // Disallow implicit true values on JSX boolean attributes
        // https://biomejs.dev/linter/rules/no-implicit-boolean
        // "noImplicitBoolean": "error",
        // Disallow type annotations for variables, parameters, and class properties initialized with a literal expression.
        // https://biomejs.dev/linter/rules/no-inferrable-types
        "noInferrableTypes": "error",
        // Disallow the use of TypeScript’s namespaces.
        // https://biomejs.dev/linter/rules/no-namespace
        "noNamespace": "error",
        // Disallow negation in the condition of an if statement if it has an else clause.
        // https://biomejs.dev/linter/rules/no-negation-else
        // "noNegationElse": "error",
        // Disallow nested ternary expressions.
        // https://biomejs.dev/linter/rules/no-nested-ternary
        "noNestedTernary": "error",
        // Disallow reassigning function parameters.
        // https://biomejs.dev/linter/rules/no-parameter-assign
        "noParameterAssign": "error",
        // Disallow the use of parameter properties in class constructors.
        // https://biomejs.dev/linter/rules/no-parameter-properties
        "noParameterProperties": "error",
        // Disallow the use of process.env.
        // https://biomejs.dev/linter/rules/no-process-env
        "noProcessEnv": "error",
        // This rule allows you to specify global variable names that you don’t want to use in your application.
        // https://biomejs.dev/linter/rules/no-restricted-globals
        // "noRestrictedGlobals": {
        //   "level": "error",
        //   "options": {
        //     "deniedGlobals": {
        //       "$": "jQuery is not allowed. Use native DOM manipulation instead.",
        //       "MooTools": "Do not use MooTools, use MeowTools instead."
        //     }
        //   }
        // }
        // Disallow the use of constants which its value is the upper-case version of its name.
        // https://biomejs.dev/linter/rules/no-shouty-constants
        "noShoutyConstants": "error",
        // Enforce the use of String.slice() over String.substr() and String.substring().
        // https://biomejs.dev/linter/rules/no-substr
        "noSubstr": "error",
        // Disallow template literals if interpolation and special-character handling are not needed
        // https://biomejs.dev/linter/rules/no-unused-template-literal
        "noUnusedTemplateLiteral": "error",
        // Disallow the use of yoda expressions.
        // https://biomejs.dev/linter/rules/no-useless-else
        "noUselessElse": "error",
        // Disallow the use of yoda expressions.
        // https://biomejs.dev/linter/rules/no-yoda-expression
        "noYodaExpression": "error",
        // Enforce the use of as const over literal type and type annotation.
        // https://biomejs.dev/linter/rules/use-as-const-assertion
        "useAsConstAssertion": "error",
        // Use at() instead of integer index access.
        // https://biomejs.dev/linter/rules/use-at-index
        "useAtIndex": "error",
        // Requires following curly brace conventions.
        // https://biomejs.dev/linter/rules/use-block-statements
        "useBlockStatements": "error",
        // Enforce using else if instead of nested if in else clauses.
        // https://biomejs.dev/linter/rules/use-collapsed-else-if
        "useCollapsedElseIf": "error",
        // Enforce using single if instead of nested if clauses.
        // https://biomejs.dev/linter/rules/use-collapsed-if
        "useCollapsedIf": "error",
        // Enforce declaring components only within modules that export React Components exclusively.
        // https://biomejs.dev/linter/rules/use-component-export-only-modules
        // "useComponentExportOnlyModules": "error",
        // Require consistently using either T[] or Array<T>
        // https://biomejs.dev/linter/rules/use-consistent-array-type
        "useConsistentArrayType": "error",
        // Enforce the use of new for all builtins, except String, Number and Boolean.
        // https://biomejs.dev/linter/rules/use-consistent-builtin-instantiation
        "useConsistentBuiltinInstantiation": "error",
        // This rule enforces consistent use of curly braces inside JSX attributes and JSX children.
        // https://biomejs.dev/linter/rules/use-consistent-curly-braces
        "useConsistentCurlyBraces": "error",
        // Require consistent accessibility modifiers on class properties and methods.
        // https://biomejs.dev/linter/rules/use-consistent-member-accessibility
        "useConsistentMemberAccessibility": "error",
        // Enforce default function parameters and optional function parameters to be last.
        // https://biomejs.dev/linter/rules/use-default-parameter-last
        "useDefaultParameterLast": "error",
        // Require the default clause in switch statements.
        // https://biomejs.dev/linter/rules/use-default-switch-clause
        "useDefaultSwitchClause": "error",
        // Require that each enum member value be explicitly initialized.
        // https://biomejs.dev/linter/rules/use-enum-initializers
        "useEnumInitializers": "error",
        // Enforce explicitly comparing the length, size, byteLength or byteOffset property of a value.
        // https://biomejs.dev/linter/rules/use-explicit-length-check
        "useExplicitLengthCheck": "error",
        // Enforce naming conventions for JavaScript and TypeScript filenames.
        // https://biomejs.dev/linter/rules/use-filenaming-convention
        "useFilenamingConvention": {
          "level": "error",
          "options": {
            // "strictCase": true,
            "requireAscii": true, // This option will be turned on by default in Biome 2.0.
            "filenameCases": ["kebab-case", "export"]
          }
        },
        // This rule recommends a for-of loop when in a for loop, the index used to extract an item from the iterated array.
        // https://biomejs.dev/linter/rules/use-for-of
        "useForOf": "error",
        // This rule enforces the use of <>…</> over <Fragment>…</Fragment>.
        // https://biomejs.dev/linter/rules/use-fragment-syntax
        "useFragmentSyntax": "error",
        // Enforce naming conventions for everything across a codebase.
        // https://biomejs.dev/linter/rules/use-naming-convention
        "useNamingConvention": {
          "level": "error"
          // "options": {
          //   "strictCase": true,
          //   "conventions": [
          //     {
          //       "selector": { "kind": "enumMember" },
          //       "formats": ["PascalCase"]
          //     }
          //   ]
          // }
        },
        // Promotes the usage of node:assert /strict over node:assert .
        // https://biomejs.dev/linter/rules/use-node-assert-strict
        "useNodeAssertStrict": "error",
        // Use the Number properties instead of global ones.
        // https://biomejs.dev/linter/rules/use-number-namespace
        "useNumberNamespace": "error",
        // Prevent extra closing tags for components without children.
        // https://biomejs.dev/linter/rules/use-self-closing-elements
        "useSelfClosingElements": "error",
        // Require assignment operator shorthand where possible.
        // https://biomejs.dev/linter/rules/use-shorthand-assign
        "useShorthandAssign": "error",
        // Disallow multiple variable declarations in the same variable statement
        // https://biomejs.dev/linter/rules/use-single-var-declarator
        // "useSingleVarDeclarator": "error",
        // Require new when throwing an error.
        // https://biomejs.dev/linter/rules/use-throw-new-error
        "useThrowNewError": "error",
        // Disallow throwing non-Error values.
        // https://biomejs.dev/linter/rules/use-throw-only-error
        "useThrowOnlyError": "error",
        // Enforce the use of String.trimStart() and String.trimEnd() over String.trimLeft() and String.trimRight().
        // https://biomejs.dev/linter/rules/use-trim-start-end
        "useTrimStartEnd": "error"
      },
      // Rules that detect code that is likely to be incorrect or useless.
      "suspicious": {
        "recommended": true,
        // Disallow the use of console.
        // https://biomejs.dev/linter/rules/no-console
        "noConsole": "error",
        // Prevents importing next/document outside of pages/_document.jsx in Next.js projects.
        // https://biomejs.dev/linter/rules/no-document-import-in-page
        // "noDocumentImportInPage": "error",
        // A describe block should not contain duplicate hooks.
        // https://biomejs.dev/linter/rules/no-duplicate-test-hooks
        "noDuplicateTestHooks": "error",
        // Disallow empty block statements and static blocks.
        // https://biomejs.dev/linter/rules/no-empty-block-statements
        "noEmptyBlockStatements": "error",
        // Disallow variables from evolving into any type through reassignments.
        // https://biomejs.dev/linter/rules/no-evolving-types
        "noEvolvingTypes": "error",
        // Disallow using export or module.exports in files containing tests
        // https://biomejs.dev/linter/rules/no-exports-in-test
        "noExportsInTest": "error",
        // Disallow focused tests.
        // https://biomejs.dev/linter/rules/no-focused-tests
        "noFocusedTests": "error",
        // Prevent using the next/head module in pages/_document.js on Next.js projects.
        // https://biomejs.dev/linter/rules/no-head-import-in-document
        // "noHeadImportInDocument": "error",
        // Checks that the assertion function, for example expect, is placed inside an it() function call.
        // https://biomejs.dev/linter/rules/no-misplaced-assertion
        "noMisplacedAssertion": "error",
        // Disallow shorthand assign when variable appears on both sides.
        // https://biomejs.dev/linter/rules/no-misrefactored-shorthand-assign
        "noMisrefactoredShorthandAssign": "warn",
        // Prevents React-specific JSX properties from being used.
        // https://biomejs.dev/linter/rules/no-react-specific-props
        // "noReactSpecificProps": "error",
        // Disallow disabled tests.
        // https://biomejs.dev/linter/rules/no-skipped-tests
        "noSkippedTests": "warn",
        // Disallow the use of var
        // https://biomejs.dev/linter/rules/no-var
        "noVar": "error",
        // Ensure async functions utilize await.
        // https://biomejs.dev/linter/rules/use-await
        "useAwait": "error",
        // Enforce passing a message value when creating a built-in error.
        // https://biomejs.dev/linter/rules/use-error-message
        "useErrorMessage": "error",
        // Require for-in loops to include an if statement.
        // https://biomejs.dev/linter/rules/use-guard-for-in
        "useGuardForIn": "error",
        // Enforce using the digits argument with Number#toFixed().
        // https://biomejs.dev/linter/rules/use-number-to-fixed-digits-argument
        "useNumberToFixedDigitsArgument": "error",
        // Enforce the use of the directive "use strict" in script files.
        // https://biomejs.dev/linter/rules/use-strict-mode
        "useStrictMode": "error"
      }
    }
  },
  // `extended` + `overrides` not working currently, need to copy the following config to projects
  "overrides": [
    // JSONC
    {
      "includes": ["**/*.jsonc"],
      "json": {
        "formatter": {
          "trailingCommas": "all"
        }
      }
    },
    // VSCode configs
    {
      "includes": [
        "**/tsconfig.json",
        "**/tsconfig.*.json",
        ".vscode/*.json",
        ".vscode/*.code-snippets"
      ],
      "json": {
        // Temp: Biome doesn't support trailing commas in tsconfig before v2
        "parser": {
          "allowComments": true,
          "allowTrailingCommas": true
        },
        "formatter": {
          "trailingCommas": "all"
        }
      }
    },
    // TypeScript
    {
      "includes": ["**/*.ts"],
      "linter": {
        "rules": {
          "complexity": {
            // Disabled for TS for now cuz it conflicts with TS's noPropertyAccessFromIndexSignature
            // See: https://github.com/biomejs/biome/issues/463
            "useLiteralKeys": "off"
          }
        }
      }
    },
    // Various configs
    {
      "includes": [
        "**/eslint.config.js",
        "**/eslint.config.cjs",
        "**/eslint.config.mjs",
        "**/eslint.*.config.js",
        "**/eslint.*.config.cjs",
        "**/eslint.*.config.mjs",
        "**/vite.config.ts",
        "**/vite.*.config.ts",
        "**/vite.config.*.ts",
        "**/vitest.config.ts",
        "**/vitest.*.config.ts",
        "**/vitest.config.*.ts",
        "**/vitest.workspace.ts",
        "**/playwright.config.ts"
      ],
      "linter": {
        "rules": {
          "style": {
            "noDefaultExport": "off"
          }
        }
      }
    },
    // Vitest test code
    {
      "includes": ["**/test/**/*.ts"],
      "javascript": {
        "globals": ["it", "beforeAll", "afterAll"]
      }
    },
    {
      "includes": ["**/*.svelte", "**/*.astro", "**/*.vue"],
      "linter": {
        "rules": {
          "style": {
            "useConst": "off",
            "useImportType": "off"
          },
          "correctness": {
            "noUnusedVariables": "off",
            "noUnusedImports": "off"
          }
        }
      }
    }
  ]
}
